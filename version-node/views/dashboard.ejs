<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
  <title>Add Device</title>
  <!-- Custom Styles to not impede with tailwind -->
  <style>
    @media (max-width: 640px) {
      .desktop-menu {
        display: none;
      }
      .mobile-menu {
        display: block;
      }
    }
    @media (min-width: 641px) {
      .desktop-menu {
        display: block;
      }
      .mobile-menu {
        display: none;
      }
    }

    /* .chart-container {
      width: 100%;
      height: 225px;
    } */
  </style>
</head>
<body class="relative">
  <!-- Navigation Bar -->
  <nav class="bg-white shadow fixed w-full z-10">
    <div class="max-w-7xl mx-auto px-2 sm:px-6 lg:px-8">
      <div class="relative flex items-center justify-between h-16">
        <div class="flex justify-between w-full sm:items-stretch sm:justify-start">
          <div class="flex-shrink-0 flex items-center mr-6 sm:mr-0">
            <!-- Logo and Name -->
            <i class="fas fa-drone mr-2 text-green-500"></i>
            <span class="text-green-500 text-lg font-semibold">S.M.A.R.T.</span>
          </div>
          <div class="hidden sm:block sm:ml-6 desktop-menu">
            <div class="flex space-x-4">
              <a href="dashboard" class="bg-green-500 text-white px-3 py-2 rounded-md text-sm font-medium" aria-current="page">Dashboard</a>
              <a href="index.html" class="text-gray-700 hover:bg-green-500 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Add Device</a>
            </div>
          </div>
          <div class="sm:hidden mobile-menu" id="mobile-menu">
            <button class="text-gray-500 hover:text-white" onclick="toggleMenu()">
              <i class="fas fa-bars"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div class="sm:hidden" id="mobile-menu-items" style="display: none;">
      <div class="px-2 pt-2 pb-3 space-y-1">
        <a href="dashboard" class="bg-green-500 text-white block px-3 py-2 rounded-md text-base font-medium" aria-current="page">Dashboard</a>
        <a href="index.html" class="text-gray-700 hover:bg-green-500 hover:text-white block px-3 py-2 rounded-md text-base font-medium">Add Device</a>
      </div>
    </div>
  </nav>

  <div class="container max-w-7xl mx-auto">
    <h2 class="text-xl ml-3 pt-20"><%= deviceName %> (<%= deviceId %>)</h2>
      <div class="bg-white p-4 rounded-lg shadow-md m-2">
        <div class="flex justify-between">
          <div class="chart-container">
            <canvas id="phChart"></canvas>
          </div>
      
          <div class="chart-container">
            <canvas id="tempChart"></canvas>
          </div>
      
          <div class="chart-container">
            <canvas id="moistureChart"></canvas>
          </div>
        </div>
      </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
    function toggleMenu() {
      var menuItems = document.getElementById('mobile-menu-items');
      if (menuItems.style.display === "none") {
        menuItems.style.display = "block";
      } else {
        menuItems.style.display = "none";
      }
    }

    const phData = <%- JSON.stringify(phData) %>;
    const tempData = <%- JSON.stringify(tempData) %>;
    const moistureData = <%- JSON.stringify(moistureData) %>;

    const phCtx = document.getElementById('phChart').getContext('2d');
    const tempCtx = document.getElementById('tempChart').getContext('2d');
    const moistureCtx = document.getElementById('moistureChart').getContext('2d');

    const phChart = new Chart(phCtx, {
      type: 'line',
      data: {
        labels: Array(10).fill(''), // Initialize with an array of 10 empty strings
        datasets: [{
          label: 'pH',
          data: Array(10).fill(phData), // Initialize with an array of 10 phData values
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            max: 14 // Set the maximum value of the y-axis to 14
          }
        }
      }
    });

    const tempChart = new Chart(tempCtx, {
      type: 'line',
      data: {
        labels: Array(10).fill(''), // Initialize with an array of 10 empty strings
        datasets: [{
          label: 'Temperature',
          data: Array(10).fill(tempData), // Initialize with an array of 10 tempData values
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            min: 0, // Set the minimum value of the y-axis to 0
            max: 120 // Set the maximum value of the y-axis to 120
          }
        }
      }
    });

    const moistureChart = new Chart(moistureCtx, {
      type: 'line',
      data: {
        labels: Array(10).fill(''), // Initialize with an array of 10 empty strings
        datasets: [{
          label: 'Moisture',
          data: Array(10).fill(moistureData), // Initialize with an array of 10 moistureData values
          backgroundColor: 'rgba(153, 102, 255, 0.2)',
          borderColor: 'rgba(153, 102, 255, 1)',
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            min: 0, // Set the minimum value of the y-axis to 0
            max: 100 // Set the maximum value of the y-axis to 100
          }
        }
      }
    });

    const socket = io();

    socket.on('data', (data) => {
      // Create new arrays for the labels and data
      const newPhLabels = [...phChart.data.labels, ''];
      const newPhData = [...phChart.data.datasets[0].data, data.currPh];
      const newTempLabels = [...tempChart.data.labels, ''];
      const newTempData = [...tempChart.data.datasets[0].data, data.currTemp];
      const newMoistureLabels = [...moistureChart.data.labels, ''];
      const newMoistureData = [...moistureChart.data.datasets[0].data, data.currMoisture];

      // Remove the old data point from the start of the arrays
      newPhLabels.shift();
      newPhData.shift();
      newTempLabels.shift();
      newTempData.shift();
      newMoistureLabels.shift();
      newMoistureData.shift();

      // Assign the new arrays to the charts
      phChart.data.labels = newPhLabels;
      phChart.data.datasets[0].data = newPhData;
      tempChart.data.labels = newTempLabels;
      tempChart.data.datasets[0].data = newTempData;
      moistureChart.data.labels = newMoistureLabels;
      moistureChart.data.datasets[0].data = newMoistureData;

      phChart.update();
      tempChart.update();
      moistureChart.update();
    });
  </script>
</body>
</html>